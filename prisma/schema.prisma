// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Sentence {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  sentence    String
  translation String
  note        String?
  audioUrl    String   @unique
  pieces      Piece[] // one-to-many relation
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
}

model Piece {
  id         String   @id @default(cuid()) @map("_id")
  word       String
  IPA        String
  sentence   Sentence @relation(fields: [sentenceId], references: [id])
  sentenceId String   @db.ObjectId
  index      Int
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  accounts          Account[]
  learningLanguage  String?
  nativeLanguage    String?
  EnglishIPAFlavour String? // only when learning language is English

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  Sentence   Sentence[]
  lastSynced DateTime?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
